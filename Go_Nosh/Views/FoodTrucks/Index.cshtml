@model IEnumerable<Go_Nosh.Models.FoodTruck>

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



<!DOCTYPE html>
<html>
<head>
    <title>Place Searches</title>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <style>
        /* Always set the map height explicitly to define the size of the div
        * element that contains the map. */

        html, body {
            height: 50%;
            background-color: #d4cdcd;
            margin: 5px;
            padding: 5px;
        }
    </style>


    <script>
        // This example requires the Places library. Include the libraries=places
        // parameter when you first load the API. For example:
        // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

        var map;
        var infoWindow;
        var markers = [];
        var service;





        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: -34.397, lng: 150.644 },
                zoom: 10
            });
            infoWindow = new google.maps.InfoWindow;

            // Try HTML5 geolocation.
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var pos = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };

                    infoWindow.setPosition(pos);
                    infoWindow.setContent("Here");
                    infoWindow.open(map);
                    map.setCenter(pos);
                }, function () {
                    handleLocationError(true, infoWindow, map.getCenter());
                });
            } else {
                // Browser doesn't support Geolocation
                handleLocationError(false, infoWindow, map.getCenter());
            }
        }

        function handleLocationError(browserHasGeolocation, infoWindow, pos) {
            infoWindow.setPosition(pos);
            infoWindow.setContent(browserHasGeolocation ?
                'Error: The Geolocation service failed.' :
                'Error: Your browser doesn\'t support geolocation.');
            infoWindow.open(map);
        }
        function makeplacesrequest(lat, lng) {
            var query = document.getelementbyid("query").value;
            if (query) {
                var placesrequest = {
                    location: new google.maps.latlng(lat, lng),
                    radius: 2000,
                    keyword: query
                };
                service = new google.maps.places.PlacesService(map);

                service.findPlaceFromQuery(request, function (results, status) {
                    if (status === google.maps.places.PlacesServiceStatus.OK) {
                        for (var i = 0; i < results.length; i++) {
                            createMarker(results[i]);
                        }

                        map.setCenter(results[0].geometry.location);
                    }
                });
            } else {
                console.log("no query entered for places search");

            }
            function createMarker(place) {
                var marker = new google.maps.Marker({
                    map: map,
                    position: place.geometry.location
                });

                google.maps.event.addListener(marker, 'click', function () {
                    infowindow.setContent(place.name);
                    infowindow.open(map, this);
                });
            }
        }
        //function createMarker(place) {
        //    var markeroptions = {
        //        position: place.geometry.location,
        //        map: map,
        //        clickable: true
        //    };

        //    var marker = new google.maps.marker(markeroptions);
        //    markers.push(marker);

        //    google.maps.event.addlistener(marker, "click", function (place, marker) {
        //        return function () {
        //            if (place.vicinity) {
        //                infoWindow.setcontent(place.name + "<br>" + place.vicinity);
        //            } else {
        //                infoWindow.setcontent(place.name);
        //            }
        //            infoWindow.open(map, marker);

        //        };
        //    }(place, marker));
        //}
        //function clearmarkers() {
        //    markers.foreach(function (marker) { marker.setmap(null); });
        //    markers = [];
        //}

        function showform() {
            var searchform = document.getelementbyid("search");
            searchform.style.visibility = "visible";
            var button = document.queryselector("button");
            button.onclick = function (e) {
                e.preventdefault();
                makePlacesRequest(currentcoords.latitude, currentcoords.longitude);
                console.log("clicked the search button");
            };
        }

    </script>
</head>
<body>
    <h1 class="align-items-lg-center">Find Food trucks</h1>
    <form id="search">
        <label for="query"> </label>
        <input id="query">
        <button action="">Search</button>
    </form>

    <div id="map"></div>



    <script src="https://maps.googleapis.com/maps/api/js?key=@API_KEY.googleMapsApiKey&libraries=places&callback=initMap" async defer></script>
</body>
</html>
<table class="table-bordered">
    <thead class="table-dark">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.FoodTruckName)
            </th>

            <th>
                @Html.DisplayNameFor(model => model.Address)
            </th>

            <th>
                @Html.DisplayNameFor(model => model.WebsiteUrl)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Facebook)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Twitter)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Instagram)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Open_now)
            </th>

            <th>
                @Html.DisplayNameFor(model => model.MenuPic)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.FoodType)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Price_level)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Rating)
            </th>

            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.FoodTruckName)
                </td>

                <td>
                    @Html.DisplayFor(modelItem => item.Address)
                </td>

                <td>
                    @Html.DisplayFor(modelItem => item.WebsiteUrl)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Facebook)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Twitter)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Instagram)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Open_now)
                </td>

                <td>
                    @Html.DisplayFor(modelItem => item.MenuPic)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.FoodType)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Price_level)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Rating)
                </td>

                <td>
                    |
                    <a style="background-color:#f1eded" asp-action="Details" asp-route-id="@item.Id">Details</a> |

                </td>
            </tr>
        }
    </tbody>
</table>
